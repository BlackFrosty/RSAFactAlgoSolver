package RSA;

import java.io.FileInputStream;
import java.math.BigInteger;
import java.security.KeyStore;

public class RSA {

	public static void main(String[] args) {
		KeyStore ks = new KeyStore(null, null, null);
		
		try {
			KeyStore ks = KeyStore.getInstance("pkcs12");
		}
		catch (Exception e) {
			
		}
		ks.load(new FileInputStream(file), "");
		
		
		BigInteger n = new BigInteger("299996217561787292756826251240073744022587364427659002955601969311597453693948323421942282716737653493469667806494795328718748694431287426493332498123774403296361258944222401796946976412532226598881087042326060698386611304550152758781853605660146138394024484376984580234460609993575374222942038026173435262460884234328411077658271473762471945787635582916630508147146325427058379173689622281755189370552117476758492729644576568772220182957835384550972772092654842082706142246481708409910183742375894996805693099913395071166112170527842473265346582564838421321907545834628201837626578791668861148755559537560386588395858682503");

		BigInteger e = new BigInteger("65537");
		
		KeySetRSA RSA = new KeySetRSA(n, e);
		
		RSA.displayRSA();

	}

}
